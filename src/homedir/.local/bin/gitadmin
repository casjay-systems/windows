#!/usr/bin/env bash

SCRIPTNAME="$(basename $0)"
SCRIPTDIR="$(readlink -f -- "$(dirname -- "$0")/..")"
USER="${SUDO_USER:-${USER}}"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# @Author      : Jason
# @Contact     : casjaysdev@casjay.pro
# @File        : install
# @Created     : Wed, Aug 05, 2020, 02:00 EST
# @License     : WTFPL
# @Copyright   : Copyright (c) CasjaysDev
# @Description : push/clone/pull from github
#
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Set functions

SCRIPTSFUNCTURL="${SCRIPTSAPPFUNCTURL:-https://github.com/casjay-dotfiles/scripts/raw/main/functions}"
SCRIPTSFUNCTDIR="${SCRIPTSAPPFUNCTDIR:-$HOME/.local/share/CasjaysDev/scripts}"
SCRIPTSFUNCTFILE="${SCRIPTSAPPFUNCTFILE:-applications.bash}"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

if [ -f "$SCRIPTSFUNCTDIR/functions/$SCRIPTSFUNCTFILE" ]; then
  . "$SCRIPTSFUNCTDIR/functions/$SCRIPTSFUNCTFILE"
else
  curl -LSs "$SCRIPTSFUNCTURL/$SCRIPTSFUNCTFILE" -o "/tmp/$SCRIPTSFUNCTFILE" || exit 1
  . "/tmp/$SCRIPTSFUNCTFILE"
fi

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

[ "$1" = "--version" ] && get_app_info "$SCRIPTNAME"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# defaults

USERNAME="$2"
TOKEN="$GITHUB_ACCESS_TOKEN"
REPO_URL="https://github.com/$USERNAME"
PROJECT_DIR="${GITHUB_PROJECT_DIR:-$HOME/Projects/github}"
TMPFILE="/tmp/github-casjaysdev-XXXXXXXXX"
LICENSE="${MYLICENSE:-https://github.com/casjay/resources/raw/main/license/wtfpl.md}"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

create_new_repo_template() {
  read -r -d '' JSON_TEMPLATE <<EOF
{
  "name" : "%s",
  "description" : "%s",
  "homepage" : "%s",
  "visibility" : "private",
  "private" : true,
  "has_issues" : false,
  "has_downloads" : false,
  "has_wiki" : false,
  "has_projects" : false
}
EOF
  JSON_OUTPUT=$(printf "$JSON_TEMPLATE" "$REPO_NAME" "$DESCRIPTION" "http://$DOMAIN")
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Clone repo from github.

ghr() {
  git remote add $1 https://github.com/$2.git
}

ghm() {
  local homerepo="$(echo "$HOME/Projects/github/$1" | sed 's/\",// ; s/\.[^.]*$// ; s#"##g')"
  mkdir -p $HOME/Projects/github/$1
  cd "$homerepo"
  git init
}

ghc() {
  local homerepo="$(echo "$HOME/Projects/github/$1" | sed 's/\",// ; s/\.[^.]*$// ; s#"##g')"
  if [ -d "$homerepo" ]; then
    git -C "$homerepo" pull
  else
    git clone https://github.com/$1.git "$homerepo"
    [ ! -d "$homerepo" ] || cd "$homerepo"
  fi
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Clone repo from gitlab.

glr() {
  git remote add $1 https://gitlab.com/$2.git
}

glm() {
  local homerepo="$(echo "$HOME/Projects/gitlab/$1" | sed 's/\",// ; s/\.[^.]*$// ; s#"##g')"
  mkdir -p $HOME/Projects/gitlab/$1
  cd "$homerepo"
  git init
}

glc() {
  local homerepo="$(echo "$HOME/Projects/gitlab/$1" | sed 's/\",// ; s/\.[^.]*$// ; s#"##g')"
  if [ -d "$homerepo" ]; then
    git -C "$homerepo" pull
  else
    git clone https://gitlab.com/$1.git "$homerepo"
    [ ! -d "$homerepo" ] || cd "$homerepo"
  fi
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Clone repo from a private git.

if [ ! -z "$MYPERSONALGITREPO" ]; then
  gpr() {
    git remote add $1 "$MYPERSONALGITREPO/$2.git"
  }

  gpm() {
    local homerepo="$(echo "$HOME/Projects/private/$1" | sed 's/\",// ; s/\.[^.]*$// ; s#"##g')"
    mkdir -p "$MYPERSONALGITREPO/$1"
    cd "$homerepo"
    git init
  }

  gpc() {
    local homerepo="$(echo "$HOME/Projects/private/$1" | sed 's/\",// ; s/\.[^.]*$// ; s#"##g')"
    if [ -d "$homerepo" ]; then
      git -C "$homerepo" pull
    else
      git clone "$MYPERSONALGITREPO/$1.git" "$homerepo"
      [ ! -d "$homerepo" ] || cd "$homerepo"
    fi
  }

else
  printf_red "You dont have the env variable  "
fi

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

run_git_init() {
  if [ ! -z "$repo" ]; then
    git remote add origin $repo
    printf_green "$repo has been added"
    printf_question "Should I push to the new repo" [Y/n]
    read -r -n 1 -s push && echo
    if [[ $push == "y" || $push == "Y" ]]; then
      printf_question "This will overwrite the repo if it exists. Continue" [Y/n]
      read -r -n 1 -s confirm_repo && echo
      if [[ "$confirm_repo" == "y" || "$confirm_repo" == "Y" ]]; then
        if [ -f gitmasterconfig ]; then cp -Rf gitmasterconfig .git/config; fi
        git push -q --set-upstream origin master -f >/dev/null 2>&1 &&
          git push -q -f >/dev/null 2>&1 &&
          printf_green "Successfully pushed to $repo" ||
          printf_red "Push to $repo has failed"
      else
        printf_info "Not pushing due to user canceling"
      fi
    else
      printf_info "Not pushing due to user canceling"
    fi
  fi
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

run_git_setup() {
  if [ -d ./.git ]; then
    prevrepo="$(git remote -v | grep push | head -n 1 | awk '{print $2}' 2>/dev/null)"
    printf_error "This project already has git setup"
    printf_info "Repo is: $prevrepo"
    printf_question "Should I continue to reset this repo"
    read -n 1 -s continue && echo ""
    if [[ $continue == "y" || $continue == "Y" ]]; then
      rm -Rf ./.git
    else
      printf_red "Initialization has failed due to user"
      exit 1
    fi
  fi

  date +"%m%d%Y%H%M-git" >version.txt
  ls README* 1>/dev/null 2>&1 || echo -e "### My New Project\n\n" >README.md
  ls LICENSE* 1>/dev/null 2>&1 || wget -q "$LICENSE" -O LICENSE.md
  git init >/dev/null 2>&1 &&
    git add . >/dev/null 2>&1 &&
    git commit -q -m ' 🦈🏠🐜❗ Initial Commit ❗🐜🦈🏠 ' &&
    printf_green "Success: Repo has been initialized"

  if [ ! -z "$prevrepo" ]; then
    printf_question "Should I reuse the remote repo" [Y/n]
    read -r -n 1 -s reuse && echo
  fi
  if [[ $reuse == "y" || $reuse == "Y" ]]; then
    remote="y"
    repo="$prevrepo"
    run_git_init
  else
    printf_question "Should I add a remote repo" [Y/n]
    read -r -n 1 -s remote && echo
    if [[ $remote == "y" || $remote == "Y" ]]; then
      printf_custom_question "3" "Enter remote repo: "
      read -r repo
      run_git_init
    else
      printf_info "You have decided not to add a remote repository"
    fi
  fi
  if [ $? -eq 0 ]; then
    exit 0
  else
    printf_red "Initialization has failed"
    exit 1
  fi
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

make_newsite() {
  git clone https://github.com/casjay-templates/domain-template $HOME/Public/sites/$1 &&
    rm -Rf $HOME/Public/sites/new/.git && cd $HOME/Public/sites/$1 && $EDITOR _config.yml
  git setup
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

run_git_setup_automated() {
  prevrepo="$(git remote -v | grep push | head -n 1 | awk '{print $2}' 2>/dev/null)"
  if [ ! -d ./.git ]; then
    printf_red "This does not seem to be a git repo"
    exit 1
  fi
  if [ -z "$prevrepo" ]; then
    printf_red "Can not run in automated mode due to there not being a repo setup"
    exit 1
  fi
  date +"%m%d%Y%H%M-git" >version.txt
  ls README* 1>/dev/null 2>&1 || echo -e "### My New Project\n\n" >README.md
  ls LICENSE* 1>/dev/null 2>&1 || wget -q "$LICENSE" -O LICENSE.md
  git init >/dev/null 2>&1 &&
    git remote add origin $prevrepo &&
    git add . >/dev/null 2>&1 &&
    git commit -q -m ' 🦈🏠🐜❗ Initial Commit ❗🐜🦈🏠 ' &&
    git push -q --set-upstream origin master -f >/dev/null 2>&1 &&
    git push -q -f >/dev/null 2>&1 &&
    printf_green "Successfully pushed to $repo" ||
    printf_red "Push to $repo has failed"
  echo ""
  exit $?
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

git_all_orgs() {
  ORGAPI="https://api.github.com/user/orgs?per_page=1000"
  for org in $GITHUB_USERNAME $(curl -H "Authorization: token $TOKEN" -Ls $ORGAPI | grep -w login | awk -F / '{print $NF}' | sed 's/\",// ; s/\.[^.]*$// ; s#"##g' | awk '{print $2}'); do
    gitadmin --clone $org
  done
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

git_init() {
  [ "$1" = "" ] && printf_red "Usage: userName repoName\n" && return 1
  [ "$2" = "" ] && printf_red "Usage: userName repoName\n" && return 1
  git_setup
  date +"%m%d%Y%H%M-git" >version.txt
  git add .
  if [ -f gitmasterconfig ]; then cp -Rf gitmasterconfig .git/config; fi
  git commit -m " 🦈🏠🐜 Initial Commit 🐜🦈🏠 "
  git remote add origin "https://github.com/$1/$2"
  git push -u origin master
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

ghgist() {
  [ "$1" = "--help" ] && printf_green "Usage: --gist name description text\n" && return 1
  [ "$1" = "" ] && printf_red "Usage: --gist name description text\n" && return 1
  [ "$2" = "" ] && printf_red "Usage: --gist name description text\n" && return 1
  local TITLE="$1"
  local DESCR="$2"
  local SUCCESS="Success"
  local ERROR="Failed"
  local CONTENT="$(printf "%s\r" "{\"description\": \"$DESCR\",\"public\": true,\"files\": {\"$TITLE\": {\"content\": \"$3\"}}}" | tee >/tmp/gist_url-data.txt)"
  printf_green "Creating $TITLE - $DESCR"
  curl -X POST -LSsi -H "Content-Type: application/json" -H "Authorization: token $TOKEN" --data @/tmp/gist_url-data.txt https://api.github.com/gists |
    grep -w "html_url" | grep "gist" | awk '{print $2}' | sed 's/\,//' >"/tmp/gist_url" 2>&1 && SUCCES="$(cat /tmp/gist_url)" &&
    devnull rm -Rf "/tmp/gist_url" "/tmp/gist_url-data.txt"
  getexitcode "$SUCCES" "$ERROR"
  return $EXIT
}
#{\"name\": \"$REPONAME\", \"description\": \"$DESCR\"}

ghdelete() {
  [ "$1" = "--help" ] && printf_green "Usage: --delete userName repoName\n" && return 1
  [ "$1" = "" ] && printf_red "Usage: --delete userName repoName\n" && return 1
  local USERNAME="$1"
  local REPONAME="$2"
  local ERROR="Deletion of $REPONAME failed"
  local SUCCES="Deletion of $REPONAME successfull"
  printf_green "Deleting $REPONAME for user $USERNAME\n"
  devnull curl -H "Authorization: token $TOKEN" -i -XDELETE "https://api.github.com/repos/$USERNAME/$REPONAME"
  sleep 3
  curl -H "Authorization: token $TOKEN" -LSsi "https://api.github.com/orgs/$USERNAME/repos?per_page=1000" | grep -vi $REPONAME | grep -q "html_url" || true \
    ghdelete-user
  getexitcode "$SUCCES" "$ERROR"
  return $EXIT
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

ghdelete-user() {
  curl -H "Authorization: token $TOKEN" -LSsi "https://api.github.com/users/$USERNAME/repos?per_page=1000" | grep -vi $REPONAME | grep -q "html_url" || true
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

ghcreate() {
  [ "$TOKEN" = "" ] && printf_red "No auth token set - GITHUB_ACCESS_TOKEN\n" && return 1
  [ "$1" = "--help" ] && printf_green "Usage: --create userName repoName Description\n" && return 1
  [ "$1" = "" ] && printf_red "Usage: --create userName repoName Description\n" && return 1
  local REPONAME="$2"
  local DESCR="$3"
  local ERROR="Creation of $REPONAME failed"
  local SUCCES="Creation of $REPONAME successfull"
  printf_green "Creating $REPONAME for user $USERNAME"
  devnull curl -H "Authorization: token $TOKEN" -LSsi "https://api.github.com/orgs/$USERNAME/repos?access_token=$TOKEN" -d "{\"name\": \"$REPONAME\", \"description\": \"$DESCR\"}"
  sleep 1
  curl -H "Authorization: token $TOKEN" -LSsi "https://api.github.com/orgs/$USERNAME/repos?per_page=1000" | grep -i $REPONAME | grep -q "html_url" >/dev/null && true ||
    ghcreate-user
  getexitcode "$SUCCES" "$ERROR"
  return $EXIT
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

ghsinglerepo() {
  [ "$1" = "" ] && printf_red "Usage: --single userName repoName" && return 1
  [ "$2" = "" ] && printf_red "Usage: --create userName repoName Description" && return 1
  git clone -q https://github.com/$1/$2
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

ghcreate-user() {
  devnull curl -H "Authorization: token $TOKEN" -H "Authorization: token $TOKEN" --data "{\"name\": \"$REPONAME\", \"description\": \"$DESCR\"}" https://api.github.com/user/repos
  sleep 1
  curl -H "Authorization: token $TOKEN" -LSsi "https://api.github.com/users/$USERNAME/repos?per_page=1000" | grep -i $REPONAME | grep -q "html_url" >/dev/null 2>&1 && true
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

help() {
  printf_red "The Default action is to clone/pull\n"
  printf_red "Usage:"
  printf_red "--single username reponame"
  printf_red "--org username"
  printf_red "--user usename"
  printf_red "--push to push the repos or"
  printf_red "--clone to clone/update local repos"
  printf_red "--help --org --user --push"
  printf_red "--clone --pull --create"
  printf_red "--delete --gist"
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# main program
main() {
  sleep 3
  for i in $(cat $TMPFILE); do
    if [ -d "$PROJECT_DIR/$USERNAME/$i" ]; then
      ERROR="Git pull $USERNAME/$i failed"
      SUCCES="Git pull $USERNAME/$i completed"
      printf_purple "Now running git pull $USERNAME/$i"
      cd "$PROJECT_DIR/$USERNAME/$i"
      if [ -f gitmasterconfig ]; then cp -Rf gitmasterconfig .git/config; fi
      devnull git pull --recurse-submodules
      getexitcode "$SUCCES" "$ERROR"
    else
      ERROR="Git clone $USERNAME/$i failed"
      SUCCES="Git clone $USERNAME/$i completed"
      printf_purple "Now running git clone $USERNAME/$i"
      devnull git clone --recurse-submodules "$REPO_URL/$i" "$PROJECT_DIR/$USERNAME/$i"
      getexitcode "$SUCCES" "$ERROR"
    fi
  done
  rm -Rf "/tmp/github-casjaysdev-*"
  exit $EXIT
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

case "$1" in
--help)
  help
  exit
  ;;
--all-orgs)
  shift 1
  git_all_orgs
  ;;
--single)
  shift 1
  ghsinglerepo $@
  ;;
--org)
  shift 1
  USERNAME="$1"
  if [ ! -z "$TOKEN" ]; then
    GITHUBAPIREPO="https://api.github.com/orgs/$USERNAME/repos?per_page=1000"
    MESSAGE="Getting the repos for $USERNAME using\n\t\tgit hub token $TOKEN"
  else
    GITHUBAPIREPO="https://api.github.com/orgs/$USERNAME/repos?per_page=1000"
    MESSAGE="Getting the repos for $USERNAME"
  fi
  echo "$(curl -H "Authorization: token $TOKEN" -Ls $GITHUBAPIREPO | grep -w clone_url | awk -F / '{print $NF}' | sed 's/\",//' | sed 's/\.[^.]*$//')" >"$TMPFILE"
  COUNT="$(cat $TMPFILE | wc -l)"
  printf_green "$MESSAGE\n\t\tThere is currently $COUNT repos avaliable\n\t\tInititialing $REPO_URL"
  main
  ;;
--user)
  shift 1
  USERNAME="$1"
  if [ ! -z "$TOKEN" ]; then
    GITHUBAPIREPO="https://api.github.com/users/$USERNAME/repos?per_page=1000"
    MESSAGE="Getting the repos for $USERNAME using\n\t\tgit hub token $TOKEN"
  else
    GITHUBAPIREPO="https://api.github.com/users/$USERNAME/repos?per_page=1000"
    MESSAGE="Getting the repos for $USERNAME"
  fi
  echo "$(curl -H "Authorization: token $TOKEN" -Ls $GITHUBAPIREPO | grep -w clone_url | awk -F / '{print $NF}' | sed 's/\",//' | sed 's/\.[^.]*$//')" >"$TMPFILE"
  COUNT="$(cat $TMPFILE | wc -l)"
  printf_green "$MESSAGE\n\t\tThere is currently $COUNT repos avaliable\n\t\tInititialing $REPO_URL"
  main
  ;;
--push)
  shift 1
  USERNAME="$1"
  if [ ! -z "$TOKEN" ]; then
    GITHUBAPIREPO="https://api.github.com/users/$USERNAME/repos?per_page=1000"
    MESSAGE="Getting the repos for $USERNAME using\n\t\tgit hub token $TOKEN"
  else
    GITHUBAPIREPO="https://api.github.com/users/$USERNAME/repos?per_page=1000"
    MESSAGE="Getting the repos for $USERNAME"
  fi
  echo "$(curl -H "Authorization: token $TOKEN" -Ls $GITHUBAPIREPO | grep -w clone_url | awk -F / '{print $NF}' | sed 's/\",//' | sed 's/\.[^.]*$//')" >"$TMPFILE"
  COUNT="$(cat $TMPFILE | wc -l)"
  printf_green "$MESSAGE\n\t\tThere is currently $COUNT repos avaliable\n\t\tInititialing $REPO_URL"
  for i in $(cat $TMPFILE); do
    if [ -d "$PROJECT_DIR/$USERNAME/$i" ]; then
      printf_purple "Now running git push $1/$i"
      ERROR="git push failed for $USERNAME/$i"
      SUCCES="git push completed for $USERNAME/$i"
      cd "$PROJECT_DIR/$USERNAME/$i"
      if [ -f gitmasterconfig ]; then cp -Rf gitmasterconfig .git/config; fi
      if (git status | grep "working tree clean") >/dev/null 2>&1; then
        getexitcode
      else
        date +"%m%d%Y%H%M-git" >version.txt
        devnull git add . &&
          devnull git commit -a -m "Fixes" &&
          devnull git push -q
        getexitcode
      fi
    fi
  done
  rm -Rf "$TMPFILE"
  unset ERROR SUCCES
  exit $EXIT
  ;;
--clone)
  shift 1
  USERNAME="$1"
  if [ ! -z "$TOKEN" ]; then
    GITHUBAPIREPO="https://api.github.com/users/$USERNAME/repos?per_page=1000"
    MESSAGE="Getting the repos for $USERNAME using\n\t\tgit hub token $TOKEN"
  else
    GITHUBAPIREPO="https://api.github.com/users/$USERNAME/repos?per_page=1000"
    MESSAGE="Getting the repos for $USERNAME"
  fi
  echo "$(curl -H "Authorization: token $TOKEN" -Ls $GITHUBAPIREPO | grep -w clone_url | awk -F / '{print $NF}' | sed 's/\",//' | sed 's/\.[^.]*$//')" >"$TMPFILE"
  COUNT="$(cat $TMPFILE | wc -l)"
  printf_green "$MESSAGE\n\t\tThere is currently $COUNT repos avaliable\n\t\tInititialing $REPO_URL"
  main
  ;;
--pull)
  shift 1
  USERNAME="$1"
  if [ ! -z "$TOKEN" ]; then
    GITHUBAPIREPO="https://api.github.com/users/$USERNAME/repos?per_page=1000"
    MESSAGE="Getting the repos for $USERNAME using\n\t\tgit hub token $TOKEN"
  else
    GITHUBAPIREPO="https://api.github.com/users/$USERNAME/repos?per_page=1000"
    MESSAGE="Getting the repos for $USERNAME"
  fi
  echo "$(curl -H "Authorization: token $TOKEN" -Ls $GITHUBAPIREPO | grep -w clone_url | awk -F / '{print $NF}' | sed 's/\",//' | sed 's/\.[^.]*$//')" >"$TMPFILE"
  COUNT="$(cat $TMPFILE | wc -l)"
  printf_green "$MESSAGE\n\t\tThere is currently $COUNT repos avaliable\n\t\tInititialing $REPO_URL"
  main
  ;;
--create)
  shift 1
  USERNAME="$1" REPONAME="$2"
  ghcreate "$@"
  exit $EXIT
  ;;
--delete)
  shift 1
  USERNAME="$1"
  ghdelete "$@"
  exit $EXIT
  ;;
--gist)
  shift 1
  USERNAME="$1"
  ghgist "$@"
  exit $EXIT
  ;;
init)
  shift 1
  git_init "$@"
  ;;
ghc)
  shift 1
  ghc "$@"
  ;;
ghr)
  shift 1
  ghr "$@"
  ;;
ghm)
  shift 1
  ghm "$@"
  ;;
glc)
  shift 1
  glc "$@"
  ;;
glr)
  shift 1
  glr "$@"
  ;;
glm)
  shift 1
  glm "$@"
  ;;
gpc)
  shift 1
  gpc "$@"
  ;;
gpr)
  shift 1
  gpr "$@"
  ;;
gpm)
  shift 1
  gpm "$@"
  ;;
newsite)
  shift 1
  newsite "$@"
  ;;
automate)
  shift 1
  run_git_setup_automated "$@"
  ;;
setup)
  shift 1
  run_git_setup "$@"
  ;;
stow)
  shift 1
  dotfiles stow "$@"
  ;;
*)
  shift 0
  if [ -z "$1" ]; then
    help
    exit
  fi
  USERNAME="$1"
  TOKEN="${GITHUB_ACCESS_TOKEN:-$2}"
  REPO_URL="https://github.com/$USERNAME"
  if [ ! -z "$TOKEN" ]; then
    GITHUBAPIREPO="https://api.github.com/users/$USERNAME/repos?per_page=1000"
    MESSAGE="Getting the repos for $USERNAME using\n\t\tgit hub token $TOKEN"
  else
    GITHUBAPIREPO="https://api.github.com/users/$USERNAME/repos?per_page=1000"
    MESSAGE="Getting the repos for $USERNAME"
  fi
  echo "$(curl -H "Authorization: token $TOKEN" -Ls $GITHUBAPIREPO | grep -w clone_url | awk -F / '{print $NF}' | sed 's/\",//' | sed 's/\.[^.]*$//')" >"$TMPFILE"
  COUNT="$(cat $TMPFILE | wc -l)"
  printf_green "$MESSAGE\n\t\tThere is currently $COUNT repos avaliable\n\t\tInititialing $REPO_URL"
  main
  ;;
esac

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

rm -Rf "/tmp/github-casjaysdev-*"

exit $EXIT

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# end
