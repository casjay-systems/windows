#!/usr/bin/env bash

SCRIPTNAME="$(basename $0)"
SCRIPTDIR="$(readlink -f -- "$(dirname -- "$0")/..")"
USER="${SUDO_USER:-${USER}}"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# @Author      : Jason
# @Contact     : casjaysdev@casjay.pro
# @File        : notes
# @Created     : Wed, Aug 05, 2020, 02:00 EST
# @License     : WTFPL
# @Copyright   : Copyright (c) CasjaysDev
# @Description : take notes using bash
#
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Set functions

SCRIPTSFUNCTURL="${SCRIPTSAPPFUNCTURL:-https://github.com/casjay-dotfiles/scripts/raw/main/functions}"
SCRIPTSFUNCTDIR="${SCRIPTSAPPFUNCTDIR:-$HOME/.local/share/CasjaysDev/scripts}"
SCRIPTSFUNCTFILE="${SCRIPTSAPPFUNCTFILE:-applications.bash}"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

if [ -f "$SCRIPTSFUNCTDIR/functions/$SCRIPTSFUNCTFILE" ]; then
  . "$SCRIPTSFUNCTDIR/functions/$SCRIPTSFUNCTFILE"
else
  curl -LSs "$SCRIPTSFUNCTURL/$SCRIPTSFUNCTFILE" -o "/tmp/$SCRIPTSFUNCTFILE" || exit 1
  . "/tmp/$SCRIPTSFUNCTFILE"
fi

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

[ "$1" = "--version" ] && get_app_info "$SCRIPTNAME"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# note taking using bash

curpathdir="$(cd -P -- "$(dirname -- "$0")" && pwd -P)"
newpathdit="~/.local/share/editors/notes"
date="$(date +"%m-%d-%Y")"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

function readandecho-toptasks() {
  readarray tasks <~"$newpathdit/$date.txt"
  awk 'NR==1, NR=='$NoJobs' {print NR,$0}' ~"$newpathdit/$date.txt"
}

function ask-whatcomplete() {
  read -p "jd- Which job number have you completed?: " job &&
    manage-taskslist
}

function manage-taskslist() {
  if [[ $job -le $NoJobs ]] && [[ $job -gt 0 ]]; then
    comp_task=$((job - 1))
    echo $'\n'
    echo "jd- Have you really completed '"${tasks[comp_task]}"'"
    read -p "y/n?: " confirm
    if [[ $confirm = "y" ]]; then
      DATE=$(date +%Y-%m-%d)
      echo $DATE" "${tasks[comp_task]} >>~/Path/to/toDosComplete.txt &&
        unset tasks[comp_task]
      for value in "${tasks[@]}"; do
        echo $value >>~/Path/to/toDo2.txt
      done &&
        mv ~/Path/to/toDo2.txt ~"$newpathdit/$date.txt"
    elif [[ $confirm = "n" ]]; then
      echo $'\n'
      echo "jd- OK, Let's try again"
      readandecho-toptasks
      ask-whatcomplete
    elif [[ $confirm = "exit" ]] || [[ $confirm = "q" ]]; then
      echo "jd: exiting jd"
    else
      echo $'\n'
      echo "jd- answer must be \"y\" or \"n\""
      manage-taskslist
    fi
  elif [[ $job = "exit" ]] || [[ $job = "q" ]]; then
    echo "jd- exiting jd"
  else
    echo $'\n'
    echo "jd- that's not a job"
    ask-whatcomplete
  fi
}

echo "Type 'exit' or 'q' to exit"
if [ $# -eq 0 ]; then NoJobs=5; fi
if [ $# -eq 1 ] && [ $1 -le 0 ]; then
  echo "Don't be silly, the number of jobs should be positive"
  NoJobs="5"
fi
if [ $# -eq 1 ] && [ $1 -gt 0 ]; then NoJobs="$1"; fi
readandecho-toptasks && ask-whatcomplete

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

if [ -d /.git ]; then
  cd $newpathdit
  git add . && git commit -m "New Note"
  cd curpathdir
fi

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# end
